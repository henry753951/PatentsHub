import { resolve } from "path";
import { promises as fs } from "fs";
import {
   defineNuxtModule,
   addTemplate,
   useLogger,
   addImports,
} from "@nuxt/kit";

export default defineNuxtModule({
   meta: {
      name: "modal-types",
      configKey: "modalTypes",
   },
   async setup(_, nuxt) {
      const logger = useLogger("modal-types");
      const modalDir = resolve(nuxt.options.rootDir, "components/global/modals");
      const typeFile = resolve(nuxt.options.buildDir, "app/modal-types.d.ts");
      // 遞歸讀取所有模態框文件
      const getModalFiles = async (dir: string): Promise<string[]> => {
         const entries = await fs.readdir(dir, { withFileTypes: true });
         const files = await Promise.all(
            entries.map((entry) => {
               const fullPath = resolve(dir, entry.name);

               if (entry.isDirectory()) {
                  return getModalFiles(fullPath);
               }
               else if (entry.isFile() && entry.name.endsWith(".vue")) {
                  return [fullPath];
               }
               return [];
            }),
         );
         return files.flat();
      };

      // 生成模態框類型
      const generateTypeFile = async () => {
         try {
            const files = await getModalFiles(modalDir);
            const modalNames = files.map((file) => {
               const relativePathIndex = file.indexOf(modalDir);
               if (relativePathIndex === -1) {
                  throw new Error(
                     `File "${file}" is not in the components/global/modals directory.`,
                  );
               }
               const file_ = file.slice(
                  relativePathIndex + modalDir.length + 1,
               );
               const relativePath = file_
                  .replace(/\\/g, "/")
                  .replace(/\.vue$/, "")
                  .replace("/", "");

               return relativePath;
            }).filter(name => name.endsWith("Modal"));

            if (modalNames.length === 0) {
               logger.warn(
                  "No modal components found in components/global/modals. Skipping type generation.",
               );
               return;
            }

            const typeContent = `
/**
 * This file is automatically generated by the modal-types module.
 * Do not edit this file directly.
 */
export type ModalName = ${modalNames.map(name => `'${name}'`).join(" | ")};
        `;

            addTemplate({
               filename: typeFile,
               getContents: () => typeContent,
            });

            logger.success(
               `Generated modal types for: ${modalNames.map(name => `'${name}'`).join(" | ")}`,
            );
         }
         catch (error) {
            logger.error("Failed to generate modal types:", error);
         }
      };

      // 監聽模態框目錄變化
      nuxt.hook("builder:watch", async (event, path) => {
         if (path.startsWith(modalDir)) {
            logger.info(
               `Detected change in ${path}, regenerating modal types...`,
            );
            await generateTypeFile();
         }
      });

      // 初始化時生成類型文件
      await generateTypeFile();

      addImports({
         type: true,
         name: "ModalName",
         as: "ModalName",
         from: "@/.nuxt/app/modal-types",
      });
   },
});
